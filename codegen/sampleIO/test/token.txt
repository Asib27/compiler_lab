<INT, int>
<ID, x>
<COMMA, ,>
<ID, y>
<COMMA, ,>
<ID, z>
<SEMICOLON, ;>
<FLOAT, float>
<ID, ab>
<SEMICOLON, ;>
<VOID, void>
<ID, foo>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<INT, int>
<ID, var>
<LPAREN, (>
<INT, int>
<ID, a>
<COMMA, ,>
<INT, int>
<ID, b>
<RPAREN, )>
<SEMICOLON, ;>
<INT, int>
<ID, var>
<LPAREN, (>
<INT, int>
<ID, a>
<COMMA, ,>
<INT, int>
<ID, b>
<RPAREN, )>
<LCURL, {>
<ID, a>
<ASSIGNOP, =>
<ID, a>
<ADDOP, +>
<ID, y>
<MULOP, *>
<CONST_INT, 2>
<SEMICOLON, ;>
<RETURN, return>
<ID, a>
<ADDOP, +>
<ID, b>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, foo>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<ID, x>
<ASSIGNOP, =>
<CONST_INT, 2>
<SEMICOLON, ;>
<ID, y>
<ASSIGNOP, =>
<ID, x>
<ADDOP, ->
<CONST_INT, 5>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, c>
<COMMA, ,>
<ID, i>
<COMMA, ,>
<ID, a>
<LSQUARE, [>
<CONST_INT, 2>
<RSQUARE, ]>
<COMMA, ,>
<ID, j>
<SEMICOLON, ;>
<FLOAT, float>
<ID, d>
<SEMICOLON, ;>
<ID, c>
<ASSIGNOP, =>
<CONST_INT, 4>
<SEMICOLON, ;>
<ID, d>
<ASSIGNOP, =>
<CONST_FLOAT, 9.5>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<CONST_INT, 9>
<SEMICOLON, ;>
<LCURL, {>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<ASSIGNOP, =>
<CONST_INT, 1>
<SEMICOLON, ;>
<ID, a>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, var>
<LPAREN, (>
<ID, c>
<COMMA, ,>
<ID, j>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, i>
<ASSIGNOP, =>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<ADDOP, +>
<ID, a>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, c>
<RELOP, <>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<RPAREN, )>
<LCURL, {>
<ID, c>
<ASSIGNOP, =>
<CONST_INT, 7>
<SEMICOLON, ;>
<RCURL, }>
<IF, if>
<LPAREN, (>
<ID, c>
<RELOP, <>
<ID, d>
<RPAREN, )>
<LCURL, {>
<ID, a>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<ASSIGNOP, =>
<ADDOP, ->
<ID, a>
<LSQUARE, [>
<CONST_INT, 1>
<RSQUARE, ]>
<SEMICOLON, ;>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<IF, if>
<LPAREN, (>
<ID, c>
<RELOP, <>
<CONST_INT, 2>
<MULOP, *>
<ID, d>
<RPAREN, )>
<LCURL, {>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<ASSIGNOP, =>
<NOT, !>
<LPAREN, (>
<CONST_INT, 7>
<RELOP, <>
<CONST_INT, 5>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, d>
<ASSIGNOP, =>
<CONST_INT, 2>
<SEMICOLON, ;>
<RCURL, }>
<FOR, for>
<LPAREN, (>
<ID, c>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, c>
<RELOP, <>
<CONST_INT, 2>
<MULOP, *>
<ID, d>
<ADDOP, +>
<CONST_INT, 3>
<SEMICOLON, ;>
<ID, c>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<MULOP, *>
<CONST_INT, 4>
<SEMICOLON, ;>
<RCURL, }>
<WHILE, while>
<LPAREN, (>
<ID, a>
<LSQUARE, [>
<CONST_INT, 0>
<RSQUARE, ]>
<DECOP, -->
<RPAREN, )>
<LCURL, {>
<ID, c>
<ASSIGNOP, =>
<ID, c>
<ADDOP, ->
<CONST_INT, 2>
<SEMICOLON, ;>
<RCURL, }>
<ID, printf>
<LPAREN, (>
<ID, c>
<RPAREN, )>
<SEMICOLON, ;>
<ID, j>
<ASSIGNOP, =>
<CONST_INT, 2>
<MULOP, *>
<CONST_INT, 3>
<ADDOP, +>
<LPAREN, (>
<CONST_INT, 5>
<MULOP, %>
<CONST_INT, 3>
<RELOP, <>
<CONST_INT, 4>
<LOGICOP, &&>
<CONST_INT, 8>
<RPAREN, )>
<LOGICOP, ||>
<CONST_INT, 2>
<SEMICOLON, ;>
<ID, d>
<ASSIGNOP, =>
<ID, var>
<LPAREN, (>
<CONST_INT, 1>
<COMMA, ,>
<CONST_INT, 2>
<MULOP, *>
<CONST_INT, 3>
<RPAREN, )>
<ADDOP, +>
<CONST_FLOAT, 3.5>
<MULOP, *>
<CONST_INT, 2>
<SEMICOLON, ;>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
