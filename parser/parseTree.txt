start : program	<Line:6-9>
 program : unit	<Line:6-9>
  unit : func_definition	<Line:6-9>
   func_defination : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line:6-9>
    type_specifier : INT	<Line:6-6>
     INT : int  <Line:6>
    ID : abc  <Line:6>
    LPAREN : (  <Line:6>
    parameter_list : type_specifier ID	<Line:6-6>
     type_specifier : INT	<Line:6-6>
      INT : int  <Line:6>
     ID : a  <Line:6>
    RPAREN : )  <Line:6>
    compound_statement : LCURL statement RCURL	<Line:6-9>
     LCURL : {  <Line:6>
     statements : statements statement	<Line:7-8>
      statements : statement	<Line:7-7>
       statement : var_declaration	<Line:7-7>
        var_declaration : type_specifier declaration_list SEMICOLON	<Line:7-7>
         type_specifier : INT	<Line:7-7>
          INT : int  <Line:7>
         declaration_list : declaration_list COMMA ID	<Line:7-7>
          declaration_list : declaration_list COMMA ID	<Line:7-7>
           declaration_list : error	<Line:7-7>
           COMMA : ,  <Line:7>
           ID : b  <Line:7>
          COMMA : ,  <Line:7>
          ID : c  <Line:7>
         SEMICOLON : ;  <Line:7>
      statement : expression_statement	<Line:8-8>
       expression_statement : expression SEMICOLON	<Line:8-8>
        expression : variable ASSIGNOP logic_expression	<Line:8-8>
         variable : ID	<Line:8-8>
          ID : a  <Line:8>
         ASSIGNOP : =  <Line:8>
         logic_expression : rel_expression	<Line:8-8>
          rel_expression : simple_expression	<Line:8-8>
           simple_expression : term	<Line:8-8>
            term : unary_expression	<Line:8-8>
             unary_expression : factor	<Line:8-8>
              factor : CONST_INT	<Line:8-8>
               CONST_INT : 10  <Line:8>
        SEMICOLON : ;  <Line:8>
     RCURL : }  <Line:9>
