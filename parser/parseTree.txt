start : program		<Line:1-24>
 program : program unit		<Line:1-24>
  program : unit		<Line:1-1>
   unit : func_declaration		<Line:1-1>
    func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON		<Line:1-1>
     type_specifier : VOID		<Line:1-1>
      VOID : void  <Line:1>
     ID : abc  <Line:1>
     LPAREN : (  <Line:1>
     RPAREN : )  <Line:1>
     SEMICOLON : ;  <Line:1>
  unit : func_definition		<Line:3-24>
   func_defination : type_specifier ID LPAREN parameter_list RPAREN compound_statement		<Line:3-24>
    type_specifier : INT		<Line:3-3>
     INT : int  <Line:3>
    ID : main  <Line:3>
    LPAREN : (  <Line:3>
    parameter_list : type_specifier ID		<Line:3-3>
     type_specifier : INT		<Line:3-3>
      INT : int  <Line:3>
     ID : a  <Line:3>
    RPAREN : )  <Line:3>
    compound_statement : LCURL statement RCURL		<Line:3-24>
     LCURL : {  <Line:3>
     statements : statements statement		<Line:4-23>
      statements : statements statement		<Line:4-21>
       statements : statements statement		<Line:4-17>
        statements : statements statement		<Line:4-13>
         statements : statements statement		<Line:4-7>
          statements : statement		<Line:4-4>
           statement : expression_statement		<Line:4-4>
            expression_statement : expression SEMICOLON		<Line:4-4>
             expression : logic_expression		<Line:4-4>
              logic_expression : rel_expression		<Line:4-4>
               rel_expression : simple_expression		<Line:4-4>
                simple_expression : term		<Line:4-4>
                 term : unary_expression		<Line:4-4>
                  unary_expression : factor		<Line:4-4>
                   factor : ID LPAREN argument_list RPAREN		<Line:4-4>
                    ID : abc  <Line:4>
                    LPAREN : (  <Line:4>
                    argument_list : 		<Line:4-4>
                    RPAREN : )  <Line:4>
             SEMICOLON : ;  <Line:4>
          statement : IF LPAREN expression RPAREN statement		<Line:5-7>
           IF : if  <Line:5>
           LPAREN : (  <Line:5>
           expression : logic_expression		<Line:5-5>
            logic_expression : rel_expression		<Line:5-5>
             rel_expression : simple_expression		<Line:5-5>
              simple_expression : term		<Line:5-5>
               term : unary_expression		<Line:5-5>
                unary_expression : factor		<Line:5-5>
                 factor : ID LPAREN argument_list RPAREN		<Line:5-5>
                  ID : abc  <Line:5>
                  LPAREN : (  <Line:5>
                  argument_list : 		<Line:5-5>
                  RPAREN : )  <Line:5>
           RPAREN : )  <Line:5>
           statement : compound_statement		<Line:5-7>
            compound_statement : LCURL statement RCURL		<Line:5-7>
             LCURL : {  <Line:5>
             statements : statement		<Line:6-6>
              statement : RETURN expression SEMICOLON		<Line:6-6>
               RETURN : return  <Line:6>
               expression : logic_expression		<Line:6-6>
                logic_expression : rel_expression		<Line:6-6>
                 rel_expression : simple_expression		<Line:6-6>
                  simple_expression : term		<Line:6-6>
                   term : unary_expression		<Line:6-6>
                    unary_expression : factor		<Line:6-6>
                     factor : CONST_INT		<Line:6-6>
                      CONST_INT : 1  <Line:6>
               SEMICOLON : ;  <Line:6>
             RCURL : }  <Line:7>
         statement : IF LPAREN expression RPAREN statement ELSE statement		<Line:9-13>
          IF : if  <Line:9>
          LPAREN : (  <Line:9>
          expression : logic_expression		<Line:9-9>
           logic_expression : rel_expression		<Line:9-9>
            rel_expression : simple_expression		<Line:9-9>
             simple_expression : term		<Line:9-9>
              term : unary_expression		<Line:9-9>
               unary_expression : factor		<Line:9-9>
                factor : ID LPAREN argument_list RPAREN		<Line:9-9>
                 ID : abc  <Line:9>
                 LPAREN : (  <Line:9>
                 argument_list : 		<Line:9-9>
                 RPAREN : )  <Line:9>
          RPAREN : )  <Line:9>
          statement : compound_statement		<Line:9-11>
           compound_statement : LCURL RCURL		<Line:9-11>
            LCURL : {  <Line:9>
            RCURL : }  <Line:11>
          ELSE : else  <Line:11>
          statement : compound_statement		<Line:11-13>
           compound_statement : LCURL RCURL		<Line:11-13>
            LCURL : {  <Line:11>
            RCURL : }  <Line:13>
        statement : WHILE LPAREN expression RPAREN statement		<Line:15-17>
         WHILE : while  <Line:15>
         LPAREN : (  <Line:15>
         expression : logic_expression		<Line:15-15>
          logic_expression : rel_expression		<Line:15-15>
           rel_expression : simple_expression		<Line:15-15>
            simple_expression : term		<Line:15-15>
             term : unary_expression		<Line:15-15>
              unary_expression : factor		<Line:15-15>
               factor : ID LPAREN argument_list RPAREN		<Line:15-15>
                ID : abc  <Line:15>
                LPAREN : (  <Line:15>
                argument_list : 		<Line:15-15>
                RPAREN : )  <Line:15>
         RPAREN : )  <Line:15>
         statement : compound_statement		<Line:15-17>
          compound_statement : LCURL RCURL		<Line:15-17>
           LCURL : {  <Line:15>
           RCURL : }  <Line:17>
       statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement		<Line:19-21>
        FOR : for  <Line:19>
        LPAREN : (  <Line:19>
        expression_statement : expression SEMICOLON		<Line:19-19>
         expression : logic_expression		<Line:19-19>
          logic_expression : rel_expression		<Line:19-19>
           rel_expression : simple_expression		<Line:19-19>
            simple_expression : term		<Line:19-19>
             term : unary_expression		<Line:19-19>
              unary_expression : factor		<Line:19-19>
               factor : ID LPAREN argument_list RPAREN		<Line:19-19>
                ID : abc  <Line:19>
                LPAREN : (  <Line:19>
                argument_list : 		<Line:19-19>
                RPAREN : )  <Line:19>
         SEMICOLON : ;  <Line:19>
        expression_statement : expression SEMICOLON		<Line:19-19>
         expression : logic_expression		<Line:19-19>
          logic_expression : rel_expression		<Line:19-19>
           rel_expression : simple_expression		<Line:19-19>
            simple_expression : term		<Line:19-19>
             term : unary_expression		<Line:19-19>
              unary_expression : factor		<Line:19-19>
               factor : ID LPAREN argument_list RPAREN		<Line:19-19>
                ID : abc  <Line:19>
                LPAREN : (  <Line:19>
                argument_list : 		<Line:19-19>
                RPAREN : )  <Line:19>
         SEMICOLON : ;  <Line:19>
        expression : logic_expression		<Line:19-19>
         logic_expression : rel_expression		<Line:19-19>
          rel_expression : simple_expression		<Line:19-19>
           simple_expression : term		<Line:19-19>
            term : unary_expression		<Line:19-19>
             unary_expression : factor		<Line:19-19>
              factor : ID LPAREN argument_list RPAREN		<Line:19-19>
               ID : abc  <Line:19>
               LPAREN : (  <Line:19>
               argument_list : 		<Line:19-19>
               RPAREN : )  <Line:19>
        RPAREN : )  <Line:19>
        statement : compound_statement		<Line:19-21>
         compound_statement : LCURL RCURL		<Line:19-21>
          LCURL : {  <Line:19>
          RCURL : }  <Line:21>
      statement : RETURN expression SEMICOLON		<Line:23-23>
       RETURN : return  <Line:23>
       expression : logic_expression		<Line:23-23>
        logic_expression : rel_expression		<Line:23-23>
         rel_expression : simple_expression		<Line:23-23>
          simple_expression : term		<Line:23-23>
           term : unary_expression		<Line:23-23>
            unary_expression : factor		<Line:23-23>
             factor : ID LPAREN argument_list RPAREN		<Line:23-23>
              ID : abc  <Line:23>
              LPAREN : (  <Line:23>
              argument_list : 		<Line:23-23>
              RPAREN : )  <Line:23>
       SEMICOLON : ;  <Line:23>
     RCURL : }  <Line:24>
